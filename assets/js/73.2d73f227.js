(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{428:function(t,_,e){"use strict";e.r(_);var r=e(44),v=Object(r.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"从哪些方面入手-进行前端性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从哪些方面入手-进行前端性能优化"}},[t._v("#")]),t._v(" 从哪些方面入手，进行前端性能优化？")]),t._v(" "),e("p",[t._v("主要从CRP（关键渲染路径）为主线，进行分析可优化的点。")]),t._v(" "),e("p",[t._v("从url输入，到浏览器渲染出页面内容的关键环节，称为"),e("strong",[t._v("关键渲染路径")])]),t._v(" "),e("p",[t._v("URI解析 ——> DNS解析 ——> TCP三次握手建立连接发送http请求 ——> 服务端处理和响应 ——> 浏览器解析和渲染 ——> TCP四次挥手断开连接")]),t._v(" "),e("h3",{attrs:{id:"_1-减少请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-减少请求"}},[t._v("#")]),t._v(" 1. 减少请求")]),t._v(" "),e("p",[t._v("减少请求又可分为两方面：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("减少请求数")]),t._v("，方法：资源合并(js、css、雪碧图)、图片转base64等；")]),t._v(" "),e("li",[e("strong",[t._v("减少请求大小")]),t._v("，方法：1. 资源压缩，例如开启gzip(一般是由apache、tomcat等web服务器开启)；2. 减少传递不必要的字段，例如静态资源无需携带cookie，可以通过多域名实现(因为同域名才会自动携带cookie)(是否还有其它不携带cookie的方法？)\n但二者有时是互斥的，比如说资源合并后，导致文件过大，此时还要考虑通过webpack等构建工具进行代码拆分、异步加载模块等操作；")])]),t._v(" "),e("h3",{attrs:{id:"_2-利用缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-利用缓存"}},[t._v("#")]),t._v(" 2. 利用缓存")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("代码版本化")])]),t._v(" "),e("li",[e("strong",[t._v("浏览器本地存储")])]),t._v(" "),e("li",[e("strong",[t._v("http缓存")])])]),t._v(" "),e("h3",{attrs:{id:"_3-利用cdn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-利用cdn"}},[t._v("#")]),t._v(" 3. 利用CDN")]),t._v(" "),e("p",[t._v("CDN全称Content Delivery Network，即内容分发网络，指通过互联网与各种缓存服务器（基于IDC）相连的网络系统。CDN是用来给网站加速的。用户请求CDN资源时，利用全局负载技术，将访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。"),e("br"),t._v("\nCDN的原理就是利用全局负载技术就近请求缓存服务器上的资源，减少网络耗时。")]),t._v(" "),e("h3",{attrs:{id:"_4-利用ssr-server-side-render-服务器端渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-利用ssr-server-side-render-服务器端渲染"}},[t._v("#")]),t._v(" 4. 利用SSR(server side render，服务器端渲染)")]),t._v(" "),e("p",[t._v("原理时，将数据在服务端插入到html节点中，然后再返回给浏览器，从而减少ajax等数据接口的请求数。比如"),e("code",[t._v("php")]),t._v("语言的"),e("code",[t._v("smarty")]),t._v("语法。目前Vue、React都有这个技术概念。")]),t._v(" "),e("h3",{attrs:{id:"_5-懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-懒加载"}},[t._v("#")]),t._v(" 5. 懒加载")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("交互懒加载")]),t._v("，例如，只请求、渲染首屏资源，下拉时再加载更多资源；默认加载很小的图，点击后才会加载高清图。")]),t._v(" "),e("li",[e("strong",[t._v("延迟懒加载")])])]),t._v(" "),e("h3",{attrs:{id:"_6-代码层面-最主要减少dom操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码层面-最主要减少dom操作"}},[t._v("#")]),t._v(" 6. 代码层面(最主要减少dom操作)")]),t._v(" "),e("p",[t._v("首先明确，为什么 dom 操作很耗性能？")]),t._v(" "),e("ol",[e("li",[t._v("线程切换(渲染引擎线程、js引擎线程)；")]),t._v(" "),e("li",[t._v("重排和重绘。")])]),t._v(" "),e("p",[t._v("如何减少dom操作？")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("缓存dom查询")]),t._v("，例如，for循环遍历所有li时，先定义长度变量，再循环；")]),t._v(" "),e("li",[e("strong",[t._v("合并dom插入")]),t._v("，先拼接dom字符串，再一次性插入父节点；")]),t._v(" "),e("li",[e("strong",[t._v("事件节流")])]),t._v(" "),e("li",[e("strong",[t._v("尽早操作")]),t._v("，例如，条件判断时，提前"),e("code",[t._v("return")]),t._v("；正确的时机执行代码"),e("code",[t._v("DOMContentLoaded")]),t._v("(dom渲染完即执行)"),e("code",[t._v("onload")]),t._v("(全部资源加载完才执行)")])]),t._v(" "),e("p",[t._v("html结构简洁、css层级不要过多，原因：")]),t._v(" "),e("ol",[e("li",[t._v("CSSOM匹配DOM生成渲染树，是一个相当复杂和消耗性能的过程；")]),t._v(" "),e("li",[t._v("css是从后向前匹配的。")])]),t._v(" "),e("h3",{attrs:{id:"other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" Other")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("script 标签：调整加载顺序提升渲染速度")]),t._v(" "),e("ul",[e("li",[t._v("async 属性。立即请求文件，但不阻塞渲染引擎，而是文件加载完毕后阻塞渲染引擎并立即执行文件内容。会在load事件之前执行，不能确保与DOMContentLoaded的执行先后顺序。适用于独立不依赖其它模块的代码，或者需要js尽早做些事情的情况，例如进入页面立马发送一个请求，此时script async可以放在head标签中。")]),t._v(" "),e("li",[t._v("defer 属性。立即请求文件，但不阻塞渲染引擎，等到解析完 HTML 之后再执行文件内容。会在DOMContentLoaded和load事件之前执行。适用于存在依赖关系的模块。")]),t._v(" "),e("li",[t._v("HTML5 标准 type 属性，对应值为“module”。让浏览器按照 ECMA Script 6 标准将文件当作模块进行解析，默认阻塞效果同 defer，也可以配合 async 在请求完成后立即执行。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/Ciqc1F647iiAZx3cAAB1ewBzlh0431.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("link 标签：通过预处理提升渲染速度")]),t._v(" "),e("ul",[e("li",[t._v("dns-prefetch。当 link 标签的 rel 属性值为“dns-prefetch”时，浏览器会对某个域名预先进行 DNS 解析并缓存。这样，当浏览器在请求同域名资源的时候，能省去从域名查询 IP 的过程，从而减少时间损耗。下图是淘宝网设置的 DNS 预解析。")]),t._v(" "),e("li",[t._v("preconnect。让浏览器在一个 HTTP 请求正式发给服务器前预先执行一些操作，这包括 DNS 解析、TLS 协商、TCP 握手，通过消除往返延迟来为用户节省时间。")]),t._v(" "),e("li",[t._v("prefetch/preload。两个值都是让浏览器预先下载并缓存某个资源，但不同的是，prefetch 可能会在浏览器忙时被忽略，而 preload 则是一定会被预先下载。")]),t._v(" "),e("li",[t._v("prerender。浏览器不仅会加载资源，还会解析执行页面，进行预渲染。")])]),t._v(" "),e("p",[t._v("注：chrome实测发现，preload、prerender并不一定有效，这是因为浏览器对该标签属性的执行，是根据实际情况判断的。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/Ciqc1F647j-AFiBtAABWh7ld3uA965.png",alt:""}})])])])])}),[],!1,null,null,null);_.default=v.exports}}]);