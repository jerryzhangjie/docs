(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{400:function(v,_,e){"use strict";e.r(_);var t=e(44),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"浏览器渲染原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[v._v("#")]),v._v(" 浏览器渲染原理")]),v._v(" "),e("ol",[e("li",[v._v("HTML代码转化为DOM；")]),v._v(" "),e("li",[v._v("CSS代码转化为CSSOM（CSS Object Model）；")]),v._v(" "),e("li",[v._v("两种树结合，生成一课渲染树Render Tree（包含每个节点的视觉信息，可以想象成是个三维的树）；")]),v._v(" "),e("li",[v._v("生成布局（layout），即将渲染树的所有节点进行平面排布（flow）（可以想象成是三维树排布成平面树，若再次触发这种排布，就称为重排或回流）；")]),v._v(" "),e("li",[v._v("将布局绘制（print）在屏幕上（若再次触发这种绘制，就称为重绘）\n注：")]),v._v(" "),e("li",[v._v("1-3很快，耗时的是4和5，4和5合起来称为“渲染”")]),v._v(" "),e("li",[v._v("重排一定重绘，重绘不一定重排")]),v._v(" "),e("li",[v._v("dom操作很消耗性能的原因：a.涉及JS引擎和渲染引擎跨线程的通信; b.会频繁触发重排和重绘。")])]),v._v(" "),e("p",[v._v("重排和重绘：")]),v._v(" "),e("ol",[e("li",[v._v("重排：对DOM的修改导致了几何属性的变化(比如：长宽、位置、显隐等)，会触发浏览器重新计算、重新排布dom，然后再绘制出来。\n"),e("blockquote",[e("p",[v._v("长宽、位置position、显隐display、窗口大小改变触发resize事件、获取style对象上的属性(offsetWidth、offsetHeight、offsetTop等)！！—— 查询style属性会强制发生重排")])])]),v._v(" "),e("li",[v._v("重绘：对DOm的修改不会导致几何属性变化(比如：背景色、文字颜色等)，无需计算，直接绘制即可。\n"),e("blockquote",[e("p",[v._v("color、background、visibility、border-radius、border-color")])])])]),v._v(" "),e("p",[v._v("如何减少重排和重绘？")]),v._v(" "),e("ol",[e("li",[v._v("避免使用table实现布局，因为细微的改动都可能导致整个页面重排；")]),v._v(" "),e("li",[v._v("使用visibility:hidden;替换display:none;这样只会重绘不会重排；")]),v._v(" "),e("li",[v._v("使用transform:translateX替换top等，因为transform是绘制层的属性，不会触发重排；")]),v._v(" "),e("li",[v._v("避免频繁查询 style对象上的样式属性，例如 document.getElementById('#app').style.offsetTop等，因为查询style属性会强制发生重排；")]),v._v(" "),e("li",[v._v("设置图层z-index。")])]),v._v(" "),e("h2",{attrs:{id:"常见浏览器内核"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见浏览器内核"}},[v._v("#")]),v._v(" 常见浏览器内核")]),v._v(" "),e("p",[v._v("浏览器内核分为两部分：渲染引擎和JS引擎。一般讲浏览器内核都是指渲染引擎。")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("浏览器")]),v._v(" "),e("th",[v._v("渲染引擎")]),v._v(" "),e("th",[v._v("JS引擎")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("IE -> Edge")]),v._v(" "),e("td",[v._v("Trident -> EdgeHTML")]),v._v(" "),e("td",[v._v("JScript")])]),v._v(" "),e("tr",[e("td",[v._v("FireFox")]),v._v(" "),e("td",[v._v("Gecko")]),v._v(" "),e("td",[v._v("JaegerMonkey")])]),v._v(" "),e("tr",[e("td",[v._v("Safari")]),v._v(" "),e("td",[v._v("Webkit")]),v._v(" "),e("td",[v._v("Nitro")])]),v._v(" "),e("tr",[e("td",[v._v("Chrome")]),v._v(" "),e("td",[v._v("Webkit -> Blink")]),v._v(" "),e("td",[v._v("V8")])]),v._v(" "),e("tr",[e("td",[v._v("Opera")]),v._v(" "),e("td",[v._v("Presto -> Blink")]),v._v(" "),e("td",[v._v("Carakan")])])])]),v._v(" "),e("p",[v._v("Blink 是 Webkit 的分支，所以本质上 Safari、Chrome、Opera 都是 Webkit")]),v._v(" "),e("p",[e("code",[v._v("js")]),v._v("加载会阻塞DOM构建吗？")]),v._v(" "),e("ol",[e("li",[v._v("不仅会阻塞DOM构建，还有导致CSSOM也阻塞DOM的构建。")])]),v._v(" "),e("p",[e("code",[v._v("css")]),v._v("加载会阻塞"),e("code",[v._v("dom")]),v._v("解析吗？"),e("br"),v._v("\n正常情况下，css的加载和解析，与dom的加载和解析同步进行，此时不会阻塞dom的解析，但是有一种情况：浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM。")]),v._v(" "),e("p",[v._v("减少白屏，应提高css加载速度：")]),v._v(" "),e("ol",[e("li",[v._v("使用"),e("code",[v._v("CDN")]),v._v("；")]),v._v(" "),e("li",[v._v("进行压缩（"),e("code",[v._v("webpack")]),v._v("、"),e("code",[v._v("gulp")]),v._v("等进行打包，或开启"),e("code",[v._v("gzip")]),v._v("压缩）；")]),v._v(" "),e("li",[v._v("合理使用缓存（设置cache-control、expires、e-tag）；")]),v._v(" "),e("li",[v._v("减少请求数（合并资源）。")])]),v._v(" "),e("p",[v._v("浏览器如何解析css选择器？"),e("br"),v._v("\n浏览器会『从右往左』解析CSS选择器。"),e("br"),v._v("\n从"),e("code",[v._v("dom树")]),v._v("和"),e("code",[v._v("css树")]),v._v("渲染生成渲染树，实际上是将"),e("code",[v._v("css")]),v._v("样式附着到对应的"),e("code",[v._v("dom")]),v._v("节点上，而每附着一个样式都要对"),e("code",[v._v("dom树")]),v._v("进行遍历。")]),v._v(" "),e("p",[v._v("以这段代码为例：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[v._v(".mod-nav h3 span {font-size: 16px;}\n")])])]),e("p",[v._v("对应的"),e("code",[v._v("dom树")]),v._v("结构如下：")]),v._v(" "),e("p",[v._v("若从左向右匹配，即从根节点开始沿每个节点分支进行遍历，结果是每个分支都要被遍历一次；\n但是从右向左匹配，可以直接剔除很多分支，可以大大提高遍历效率。")]),v._v(" "),e("p",[v._v("DOMContentLoaded 与 load 区别？")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("load")]),v._v("：等待页面所有资源加载完成才会触发，包括css、js、图片等；")]),v._v(" "),e("li",[e("code",[v._v("DOMContentLoaded")]),v._v("：等待dom资源加载、解析完成就会触发；")]),v._v(" "),e("li",[e("code",[v._v("DOMContentLoaded")]),v._v("总是早于"),e("code",[v._v("load")]),v._v("触发。")])]),v._v(" "),e("p",[e("code",[v._v("async")]),v._v("与"),e("code",[v._v("defer")]),v._v("的区别？")]),v._v(" "),e("ul",[e("li",[v._v("有"),e("code",[v._v("async")]),v._v("，加载和渲染后边的"),e("code",[v._v("html")]),v._v("，将与"),e("code",[v._v("js")]),v._v("的加载并行进行，且先加载完成的"),e("code",[v._v("async")]),v._v("优先执行，即执行顺序与加载顺序无关，不确定在"),e("code",[v._v("DOMContentLoaded")]),v._v("之前或之后执行，但一定在"),e("code",[v._v("load")]),v._v("之前执行。适用于不操作"),e("code",[v._v("dom")]),v._v("的"),e("code",[v._v("js")]),v._v("文件的加载。")]),v._v(" "),e("li",[v._v("有"),e("code",[v._v("defer")]),v._v("，加载和渲染后边的"),e("code",[v._v("html")]),v._v("，将与"),e("code",[v._v("js")]),v._v("的加载并行进行，但"),e("code",[v._v("js")]),v._v("的执行要在"),e("code",[v._v("html")]),v._v("解析结束且"),e("code",[v._v("DOMContentLoaded")]),v._v("触发之前，而且执行顺序与加载顺序一致。适用于彼此有依赖关系的"),e("code",[v._v("js")]),v._v("文件的加载。")])]),v._v(" "),e("p",[v._v("综上所述，我们得出这样的结论：")]),v._v(" "),e("ul",[e("li",[v._v("浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。")]),v._v(" "),e("li",[v._v("CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。")]),v._v(" "),e("li",[v._v("通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才继续DOM构建。")])]),v._v(" "),e("p",[v._v("参考：\nhttps://juejin.im/post/5e143104e51d45414a4715f7")]),v._v(" "),e("p",[v._v("https://fed.taobao.org/blog/taofed/do71ct/performance-composite/?spm=taofed.blogs.blog-list.10.67bd5ac8fHy0LS")]),v._v(" "),e("p",[v._v("https://zhuanlan.zhihu.com/p/47407398")]),v._v(" "),e("p",[v._v("https://juejin.im/post/5a6547d0f265da3e283a1df7")])])}),[],!1,null,null,null);_.default=o.exports}}]);