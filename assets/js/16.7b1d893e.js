(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{374:function(n,e,t){"use strict";t.r(e);var r=t(44),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("ol",[t("li",[t("p",[t("code",[n._v("document.querySelector('#app')")]),n._v("与"),t("code",[n._v("document.getElementById('app')")]),n._v("有什么区别？")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" <ul>\n     <li>111</li>\n     <li>222</li>\n     <li>333</li>\n </ul>\n\n //`document.querySelector('#app')`选出的元素是静态的：\n <script>\n     var ul = document.querySelector('ul');\n     var list = ul.querySelectorAll('li');\n     //又创建了5个新的li，添加在ul列表上。\n     for (var i = 0; i < 5; i++) {\n         ul.appendChild(document.createElement('li'));\n     }\n     console.log(list.length)  // 仍然是3\n <\/script>\n\n // `document.getElementById('app')`是动态的\n <script>\n     var ul = document.getElementsByTagName('ul')[0];\n     var list = ul.getElementsByTagName('li');\n     //又创建了5个新的li，添加在ul列表上。\n     for (var i = 0; i < 5; i++) {\n         ul.appendChild(document.createElement('li'));\n     }\n     console.log(list.length)  // 变成了8\n <\/script>\n")])])]),t("p",[n._v("同理可推广到："),t("code",[n._v("document.querySelectorAll")]),n._v("、"),t("code",[n._v("document.getElementsByClassName")]),n._v("、"),t("code",[n._v("document.getElementsByTagName")])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[t("code",[n._v("dom")]),n._v("对象与"),t("code",[n._v("jQuery")]),n._v("对象互转")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" var pDom = document.querySelectorAll('p')\n var $pDom = $('p')\n \n // dom 转 jQuery\n var $pDom1 = $(pDom)\n\n // jQuery 转 dom，分两种情况\n // 情况一：jQuery 对象只含有一个元素，例如 $('#p')\n var pDom1 = $pDom[0]      // 方法1\n var pDom2 = $pDom.get(0)  // 方法2\n // 情况二：jQuery 对象含有多个元素，例如 $('p')\n var pDom1 = []\n var len = $pDom.length\n for(var i = 0; i < len; i++) {\n     pDom1.push($pDom[i])\n }\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[n._v("实现动画效果")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" // CSS\n .box {\n     position: relative; // relative、absolute、fixed之一\n     animation: mymove 5s infinite;\n }\n @keyframes mymove {\n     from {\n         left: 0;\n     }\n     to {\n         left: 200px;\n     }\n }\n\n // js —— 定时器\n let box = document.querySelector('.box')\n let flag = true\n let left = 0\n setInterval(() => {\n     left === 0 ? flag = true : (left === 100 ? flag = false : '')\n     flag ? box.style.left = `${left++}px` : box.style.left = `${left--}px`\n }, 1000 / 60)\n\n // js —— requestAnimationFrame\n let box = document.getElementById(\".box\");\n let flag = true;\n let left = 0;\n function render() {\n     left == 0 ? flag = true : left == 100 ? flag = false : '';\n     flag ? box.style.left = ` ${left++}px` : box.style.left = ` ${left--}px`;\n }\n let requestAnimFrame = (function(){     //兼容性处理\n     return  window.requestAnimationFrame       ||\n             window.webkitRequestAnimationFrame ||\n             window.mozRequestAnimationFrame    ||\n             function(callback){\n                 window.setTimeout(callback, 1000 / 60);\n             };\n })();\n (function animloop() {\n     render();\n     requestAnimFrame(animloop);\n })();\n")])])]),t("p",[n._v("两种js实现方案对比："),t("br"),n._v("\n渲染帧是指浏览器一次完整绘制过程，帧之间的时间间隔是DOM视图更新的最小间隔。由于主流的屏幕刷新率都在60hz，因此渲染一帧的时间就必须控制在16.7ms内才能保证不掉帧。也就是说每一次渲染都要在 16.7ms 内页面才够流畅不会有卡顿感。这段时间内浏览器需要完成如下事情：")]),n._v(" "),t("ul",[t("li",[n._v("js执行：脚本造成了需要重绘的改动，比如增删 DOM、请求动画等")]),n._v(" "),t("li",[n._v("样式计算")]),n._v(" "),t("li",[n._v("重排和重绘")])]),n._v(" "),t("p",[n._v("一个帧内要做这么多事情，如果js执行时间过长超过16.7ms，就会丢掉一次帧的绘制，出现卡顿现象。一般一个帧内的多次DOM改动会被合并渲染。")]),n._v(" "),t("p",[n._v("window.requestAnimationFrame用于在下一个渲染帧之前执行一个回调函数。可以用来做逐帧动画，这会使你的动画函数先于浏览器重绘动作。通常来说，被调用的频率就是60hz。")])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("p",[n._v("实现一个“沉睡”函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" function sleep(time) {\n     return new Promise((resolve) => {\n         setTimeout(resolve, time)\n     })\n }\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[n._v("数组去重")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" // 方法一：Set\n [...new Set([1,1,3,4,2,2])]  或 Array.from(new Set([1,1,3,4,2,2]))\n\n // 方法二：filter \n // 唯一元素的特点：该元素在数组中的索引，与该元素第一次出现时的索引值相同。eg. ['a','b','a'] b的索引是1，b第一次出现时的索引也是1，所以b唯一；但第二个a的索引是2，它第一次出现时的索引却是0，所以a不唯一。\n function unique(arr) {\n     return arr.filter((item, index, arr) => {\n         return arr.indexOf(item) === index\n     })\n }\n\n // 方法三：双循环\n function unique(arr) {\n     let res = [arr[0]]\n     for (let i = 1; i < arr.length; i++) {\n         let flag = true\n         for (let j = 0; j < res.length; j++) {\n             if (arr[i] === res[j]) {\n                 flag = false\n                 break\n             }\n         }\n         if (flag) {\n             res.push(arr[i])\n         }\n     }\n     return res\n }\n\n // 方法四：对象键值对\n function unique(arr) {\n     let res = []\n     let obj = {}\n     for (let i = 0; i < arr.length; i++) {\n         if (!obj[arr[i]]) {\n             res.push(arr[i])\n             obj[arr[i]] = 1\n         } else {\n             obj[arr[i]] += 1\n         }\n     }\n     return res\n }\n\n // 方法五：检查当前项在后面项中是否包含\n function unique(arr) {\n     let res = []\n     arr.forEach((item, index, arr) => {\n         let rightArr = arr.slice(index+1)\n         if (rightArr.indexOf(item) === -1) {\n             res.push(item)\n         }\n     })\n     return res\n }\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[t("p",[n._v("数组扁平化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" // 方法一：ES6 flat方法 参数默认为1 - 展平一层，Infinity - 无论几层都展成一维。\n function flatten(array) {\n     return array.flat(Infinity)\n }\n\n // 方法二：递归\n // 普通递归\n function flatten(array) {\n     let result = []\n     array.forEach((item, i) => {\n         if (Array.isArray(item)) {\n             result = result.concat(flatten(item))\n         } else {\n             result.push(item)\n         }\n     })\n     return result\n }\n\n // reduce递归\n function flatten(array) {\n     return array.reduce((resultArray, currentValue) => {\n         currentValue = Array.isArray(currentValue) ? flatten(currentValue) : currentValue\n         return resultArray.concat(currentValue)\n     }, [])\n }\n\n // 方法三：解构运算符 + concat ...   \n // 利用...可以将最外层数组转为逗号分隔的参数序列\n // 利用concat可以实现将多个参数拼接到数组上 [1,2].concat(3, 4) -> [1,2,3,4]\n function flatten(array) {\n     while (array.some(item => Array.isArray(item))) {\n         array = [].concat(...array)\n     }\n     return array\n }\n\n // 方法四：toString()  利用其能将数组变成以逗号分隔的字符串特性 [1, [2, [3, [4, 5]]]].toString() -> '1,2,3,4,5'  缺点：仅适用纯数字组成的数组\n function flatten(array) {\n     let str = array.toString()          // '1,2,3,4,5'\n     let strArray = str.split(',')       // ['1', '2', '3', '4', '5']\n     return strArray.map(item => +item)    // 隐式类型转换，字符串 -> 数字\n }\n\n let ar = flatten([1,2,[3,4,[5,6]]])\n console.log(ar)\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[n._v("如何避免重定向？")])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[t("p",[n._v("类型检查")]),n._v(" "),t("p",[n._v("js 数据类型：")]),n._v(" "),t("ul",[t("li",[n._v("基本类型：Number、String、Boolean、Undefined、Null、Symbol")]),n._v(" "),t("li",[n._v("引用类型：Object（Object、Function、Array、Date、RegExp）")])]),n._v(" "),t("p",[n._v("typeof判断数据类型：（返回number、string、boolean、undefined、symbol、function、object）")]),n._v(" "),t("ul",[t("li",[n._v("对于基本类型，除null外，均可返回正确的结果；")]),n._v(" "),t("li",[n._v("对于引用类型，除function外，均返回Object；")]),n._v(" "),t("li",[n._v("对于null，返回object；")]),n._v(" "),t("li",[n._v("对于function，返回function。")])]),n._v(" "),t("p",[n._v("instanceof"),t("br"),n._v("\n用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任意位置"),t("br"),n._v("\n// 实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" function myInstanceof(left, right) {\n     let proto = Object.getPrototypeOf(left)\n     let prototype = right.prototype\n     while (true) {\n         if (proto === null) return false    // 函数中的 return 会提前终止函数，即便 return 在循环中\n         if (proto === prototype) return true\n         proto = Object.getPrototypeOf(proto)\n     }\n }\n")])])]),t("p",[n._v("constructor"),t("br"),n._v("\n对象的 constructor 属性指向 该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写")]),n._v(" "),t("p",[n._v("toString() 是 Object 的原型方法，调用该方法，默认返回当前数据类型的 [[Class]]，格式为[object Xxx]。不仅适用于Object，基本类型也适用。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" function getType(data) {\n     let typeClass = Object.prototype.toString.call(data)\n     typeClass = typeClass.replace('[', '').replace(']', '')\n     typeClass = typeClass.split(' ')\n     return typeClass[1]\n }\n")])])]),t("p",[n._v("undefined 声明了，但是未定义(未赋值)，可以使用 void 0 来安全的获取 undefined （表达式 void xx 没有返回值，所以返回的是 undefined）\nundeclared 未声明，这种变量直接使用时会报引用错误，如 ReferenceError: a is not defined\nnull 代表空对象，常用于初始化对象变量，是个基本类型的值，而 typtof null 为 object 是一个历史问题。")])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[t("p",[n._v("找到字符串中第一个不重复的元素")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" // 正则 当前元素在字符串中只能匹配到一次，则该元素唯一\n function getFirstUniqueChar(str) {\n     let targetChar = ''\n     for (let x of str) {\n         let reg = new RegExp(`${x}`, 'g')   // 创建正则\n         if (str.match(reg).length == 1) {\n             targetChar = x\n             break\n         }\n     }\n     return targetChar\n }\n\n // indexOf 目标元素右边的字符串中不含有该元素，则该元素唯一\n function getFirstUniqueChar(str) {\n     let targetChar = ''\n     let len = str.length\n     for (let i = 0; i < len; i++) {]\n         let rightStr = str.slice(i+1)\n         if (rightStr.indexOf(str[i]) == -1) {\n             targetChar = str[i]\n             break\n         }\n     }\n     return targetChar\n }\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[t("p",[n._v("实现依次获取urls接口的返回数据")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function getAllRes(urls) {\n    let pArr = []\n    urls.forEach((url) => {\n        let p = new Promise((resolve, reject) => {\n            setTimeout((res) => {\n                console.log(url)\n                resolve(res)\n            }, 200)\n        })\n        pArr.push(p)\n    })\n\n    Promise.all(pArr).then((results) => {\n        console.log(results)\n    })\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[t("p",[n._v("数组排序（冒泡、快速、插入）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 冒泡排序（双循环，将比当前元素大的元素，与当前元素交换位置，实现大的放到最前边）\nfunction sort(arr) {\n    let len = arr.length\n    for (let i = 0; i < len - 1; i++) {\n        for (let j = i + 1; j < len - 1; j++) {\n            let temp = ''\n            if (arr[j] > arr[i]) {\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                // ES6   [arr[j], arr[i]] = [arr[i], arr[j]]\n            }\n        }\n    }\n    console.log(arr)\n}\n\n// 插入排序（类比摸扑克牌的过程，每摸到一张，都与手中已有的牌比较，根据大小插入相应的位置）\nfunction sort(arr) {\n    let handle = []                 // 手中的牌 —— 即最终的排序结果\n    handle.push(arr[0])\n    let len = arr.length\n    for (let i = 1; i < len; i++) {\n        let A = arr[i]              // 最新摸到的一张\n        let handleLen = handle.length\n        for (let j = handleLen - 1; j >= 0; j--) {   // 从手中最后边一张依次向前比较\n            let B = handle[j]       // 手中当前要比较的牌\n            if (A > B) {            // 如果新牌比当前牌大，就放在当前牌后边\n                handle.splice(j + 1, 0, A)\n                break\n            }\n            if (j === 0) {\n                handle.unshift(A)\n            }\n        }\n    }\n    console.log(handle)\n}\n\n// 快速排序（找出中间位置的元素，比中间元素）（在三者中性能最好）\nfunction sort(arr) {\n    let len = arr.length\n    // 结束递归\n    if (len <= 1) {\n        return arr\n    }\n    // 拿到中间项，并从数组中将中间项去掉(去掉一个后，len变成了len-1)\n    let middleIndex = Math.floor(len / 2)\n    let middleValue = arr.splice(middleIndex, 1)\n    len -= 1\n    // 建立两个数组，比中间项小的放入leftArr，反之放入rightArr\n    let leftArr = [], rightArr = []\n    for (let i = 0; i < len; i++) {\n        let item = arr[i]\n        item < middleValue ? leftArr.push(item) : rightArr.push(item)\n    }\n    return sort(leftArr).concat(middleValue, sort(rightArr))\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[t("p",[n._v("斐波那契数列（1，1，2，3，5，8，13...）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 递归\nfunction fibonacci(n) {\n    if (n === 0 || n === 1) {   // 递归终止条件\n        return 1\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n// 依次创建每一项\nfunction fibonacci(n) {\n    let arr = [1, 1]\n    for (let i = 2; i <= n; i++) {\n        let currentFb = arr[i - 2] + arr[i - 1]\n        arr.push(currentFb)\n    }\n    return arr[n]\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"13"}},[t("li",[t("p",[n._v("输入一个正整数 N，输出所有和为 N 的连续正数序列 15 => [[1,2,3,4,5],[4,5,6],[7,8]]")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 1.向上取整求中位数，则所求结果肯定不含比中位数大的数，例如 15，中位数8，比中位数大的数9，8+9>15\n// 2.从1开始，尝试逐一累加中位数以下的数\n// 3.连续整数求和公式 (a1+an)*n/2\nfunction fn(N) {\n    let resultArr = []\n    let middle = Math.ceil(N)   // 中位数\n    for (let i = 1; i <= middle; i++) {\n        for (let j = middle; j > i; j--) {\n            let total = (i+j)*(j-i+1)/2\n            if (total === N) {\n                let result = createArr(i, j)\n                resultArr.push(result)\n                break\n            }\n        }\n    }\n    console.log(resultArr)\n}\n\nfunction createArr(i, j) {\n    let arr = []\n    for (let item = i; item <= j; item++) {\n        arr.push(item)\n    }\n    return arr\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"14"}},[t("li",[n._v("Cookie、Session、Token、sessionStorage、localStorage存储位置")])]),n._v(" "),t("ul",[t("li",[n._v("Cookie - 本地硬盘")]),n._v(" "),t("li",[n._v("Session - 服务器内存")]),n._v(" "),t("li",[n._v("Token - localStorage中 - 本地硬盘")]),n._v(" "),t("li",[n._v("sessionStorage - 本地内存 (仅在同一窗口中共享，即便相同协议域名端口下的不同窗口也无法共享)")]),n._v(" "),t("li",[n._v("localStorage - 本地硬盘 (相同协议域名端口即可共享)")])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"15"}},[t("li",[t("p",[n._v("base64 转 url")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function base64ToUrl(code) {\n    const parts = code.split(';base64,')\n    const type = parts[0].split(':')[1]\n    const decodeStr = window.atob(parts[1])\n    const decodeStrLen = decodeStr.length\n    const uInt8Array = new Unit8Array(decodeStrLen)\n    for (let i = 0; i < decodeStrLen; i++) {\n        uInt8Array[i] = decodeStr.charCodeAt(i)\n    }\n    const blob = new Blob([uInt8Array], { type })\n    const url = window.URL.createObjectURL(blob)\n    return url\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"16"}},[t("li",[t("p",[n._v("ajax")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("\x3c!-- 创建对象 --\x3e\nconst xhr = new XMLHttpRequest()\n\x3c!-- 建立连接 --\x3e\nxhr.open('get', url, true)\n\x3c!-- 发送请求 --\x3e\nxhr.send()\n\x3c!-- 接收响应 --\x3e\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n            success(xhr.responseText)\n        } else {\n            fail(xhr.status)\n        }\n    }\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"17"}},[t("li",[t("p",[n._v("实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) = 6;\nadd(1, 2, 3)(4) = 10;\nadd(1)(2)(3)(4)(5) = 15;")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function add() {\n    var _args = Array.prototype.slice.call(arguments)\n    var _adder = function() {\n        _args.push(...arguments)\n        return _adder\n    }\n    _adder.toString = function() {\n        return _args.reduce(function(a, b) {\n            return a + b\n        }, 0)\n    }\n    return _adder\n}\n")])])])])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"18"}},[t("li",[n._v("给定一个长度为n的绳子，将其分成m段（m>1）,求m段的乘积最大")])]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"19"}},[t("li",[n._v("函数柯里化？")])]),n._v(" "),t("p",[n._v("函数柯里化是指将一个使用多个参数的函数转化为一系列使用一个参数的函数的技术。")]),n._v(" "),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"20"}},[t("li",[n._v("求二进制数")])]),n._v(" "),t("p",[n._v("整数：除2取余，倒序读\n5\n5/2 2 1\n2/2 1 0\n1/2 0 1\n故：5 -> 101")]),n._v(" "),t("p",[n._v("负数：正数求值，取反，再加1")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    -5\n    正数 5 -> 101\n    取反 101 -> 010\n    加1  010 -> 011\n    故：-5 -> 011\n")])])]),t("p",[n._v("小数：小数乘2，取整，正序读")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    0.125\n    小数乘2 0.125*2=0.25 取整(整数部分为0)  0\n    0.25*2=0.5  0\n    0.5*2=1.0   1(乘到小数为0时结束)\n    正序读       0.001\n\n    同理可试求 0.1\n    0.1*2=0.2  0\n    0.2*2=0.4  0\n    0.4*2=0.8  0\n    0.8*2=1.6  1\n    0.6*2=1.2  1\n    0.2*2=0.4  0 (开始循环了)\n    0.4*2=0.8  0 (开始循环了)\n    0.8*2=1.6  1 (开始循环了)\n    ...\n\n    可见 0.1 求二进制是一个无限循环的小数(0.000110011...)，这也是 0.1 + 0.2 != 0.3 的原因。\n")])])]),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"21"}},[t("li",[n._v("原码、反码、补码")])]),n._v(" "),t("p",[n._v("正数：原码、反码、补码一致")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("[+7]原：00000111 [+7]反：00000111 [+7]补：00000111\n")])])]),t("p",[n._v("负数：\n* 反码：符号位(1)不变，其它位取反\n* 补码：反码加1")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("[-7]原：10000111 [-7]反：11111000 [-7]补：11111001\n")])])]),t("p",[n._v("/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */")]),n._v(" "),t("ol",{attrs:{start:"22"}},[t("li",[t("p",[n._v("设置小于 12px 的字体")]),n._v(" "),t("p",[n._v(".text {\nfont-size: 12px;    // chrome 最小仅支持12px\ntransform: scale(0.5);  // 在12px基础上缩小，即便font-size小于12px也是以12px为基础\n}")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);