(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{422:function(t,a,e){"use strict";e.r(a);var s=e(44),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue2-5开发去哪网-课程跟学项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2-5开发去哪网-课程跟学项目"}},[t._v("#")]),t._v(" Vue2.5开发去哪网(课程跟学项目)")]),t._v(" "),e("blockquote",[e("p",[t._v("项目来源：慕课网 - Vue2.5开发去哪网app\n文档说明：1.记录知识细节；2.归纳学习心得。")])]),t._v(" "),e("h2",{attrs:{id:"一、mac升级nodejs和npm到最新版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、mac升级nodejs和npm到最新版"}},[t._v("#")]),t._v(" 一、Mac升级Nodejs和Npm到最新版")]),t._v(" "),e("h3",{attrs:{id:"_1-先查看本机node-js版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-先查看本机node-js版本"}},[t._v("#")]),t._v(" 1.先查看本机node.js版本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("node -v\n")])])]),e("h3",{attrs:{id:"_2-清除node-js的cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-清除node-js的cache"}},[t._v("#")]),t._v(" 2.清除node.js的cache")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo npm cache clean -f\n")])])]),e("h3",{attrs:{id:"_3-安装-n-工具-这个工具是专门用来管理node-js版本的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-安装-n-工具-这个工具是专门用来管理node-js版本的"}},[t._v("#")]),t._v(" 3.安装 n 工具，这个工具是专门用来管理node.js版本的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo npm install -g n\n")])])]),e("h3",{attrs:{id:"_4-安装最新版本的node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-安装最新版本的node-js"}},[t._v("#")]),t._v(" 4.安装最新版本的node.js")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo n stable\n")])])]),e("h3",{attrs:{id:"_5-再次查看本机的node-js版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-再次查看本机的node-js版本"}},[t._v("#")]),t._v(" 5.再次查看本机的node.js版本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("node -v\n")])])]),e("h3",{attrs:{id:"_6-更新npm到最新版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-更新npm到最新版"}},[t._v("#")]),t._v(" 6.更新npm到最新版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo npm install npm@latest -g\n")])])]),e("h3",{attrs:{id:"_7-验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-验证"}},[t._v("#")]),t._v(" 7.验证")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("node -v\nnpm -v\n")])])]),e("h2",{attrs:{id:"二、jquery与vue开发的不同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、jquery与vue开发的不同点"}},[t._v("#")]),t._v(" 二、jQuery与Vue开发的不同点")]),t._v(" "),e("h3",{attrs:{id:"_1-架构模式区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构模式区别"}},[t._v("#")]),t._v(" 1.架构模式区别")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("jQuery是基于传统MVP(或叫MVC、MVX)前端架构模式")]),t._v("，即数据层(Model)、视图层(View)、控制层(Presenter)，开发中绝大部分是在写控制层代码，通常是通过ajax请求实现与数据层的交互，以及通过dom操作实现对视图层的渲染。")]),t._v(" "),e("li",[e("strong",[t._v("Vue是基于MVVM架构模式")]),t._v("，即数据层、视图层、VM层，VM由Vue核心代码实现，负责监控数据的改变并映射至视图层(数据绑定)，以及监听视图层的交互操作并调用相应的事件(Dom监听)。鉴于VM已交由Vue管控，以及VM的特点，所以实际Vue开发中主要是对数据层的操作。")]),t._v(" "),e("li",[t._v("简单来说，"),e("strong",[t._v("jQuery是面向dom编程，而Vue是面向数据编程")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"_2-todo-总结其它方面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-todo-总结其它方面"}},[t._v("#")]),t._v(" 2.Todo:总结其它方面")]),t._v(" "),e("h2",{attrs:{id:"三、多页面应用vs单页面应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、多页面应用vs单页面应用"}},[t._v("#")]),t._v(" 三、多页面应用vs单页面应用")]),t._v(" "),e("h3",{attrs:{id:"_1-多页面应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-多页面应用"}},[t._v("#")]),t._v(" 1.多页面应用")]),t._v(" "),e("p",[t._v("页面跳转 —— 返回html\n优点：首屏时间快，SEO效果好\n缺点：页面切换慢")]),t._v(" "),e("h3",{attrs:{id:"_2-单页面应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-单页面应用"}},[t._v("#")]),t._v(" 2.单页面应用")]),t._v(" "),e("p",[t._v("页面跳转 —— JS渲染\n优点：页面切换快\n缺点：首屏时间稍慢，SEO效果差 （Vue服务器端渲染可解决上述缺点）")]),t._v(" "),e("h2",{attrs:{id:"四、移动端开发常见问题及解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、移动端开发常见问题及解决方案"}},[t._v("#")]),t._v(" 四、移动端开发常见问题及解决方案")]),t._v(" "),e("h3",{attrs:{id:"_1-html中meta标签初始化配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-html中meta标签初始化配置"}},[t._v("#")]),t._v(" 1.html中meta标签初始化配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">\n')])])]),e("h3",{attrs:{id:"_2-页面样式初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-页面样式初始化"}},[t._v("#")]),t._v(" 2.页面样式初始化")]),t._v(" "),e("blockquote",[e("p",[t._v("引入 reset.css ‘/src/assets/style/reset.css’")])]),t._v(" "),e("h3",{attrs:{id:"_3-移动端多倍屏将1px边框显示成多像素边框问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-移动端多倍屏将1px边框显示成多像素边框问题"}},[t._v("#")]),t._v(" 3.移动端多倍屏将1px边框显示成多像素边框问题")]),t._v(" "),e("blockquote",[e("p",[t._v("引入 border.css ‘/src/assets/style/border.css’")])]),t._v(" "),e("h3",{attrs:{id:"_3-解决部分手机机型上部分浏览器存在300ms的click延时问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决部分手机机型上部分浏览器存在300ms的click延时问题"}},[t._v("#")]),t._v(" 3.解决部分手机机型上部分浏览器存在300ms的click延时问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import fastClick from 'fastclick'\nfastClick.attach(document.body)\n")])])]),e("h3",{attrs:{id:"_4-移动端长度单位-rem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-移动端长度单位-rem"}},[t._v("#")]),t._v(" 4.移动端长度单位 rem")]),t._v(" "),e("blockquote",[e("p",[t._v("rem(root em,根em)是css3新增的相对长度单位，它的取值始终相对于html的font-size值，这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免em字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：p {font-size:14px; font-size:.875rem;}")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1rem = html 的font-size\n例如 二倍屏，设计稿中height为86px，则css设置应为 height: 43px;\n若 html{font-size: 50px;} 那么 1rem = 50px, height = 43px = .86rem\n")])])]),e("p",[t._v("注：任意浏览器的默认字体都是16px")]),t._v(" "),e("h2",{attrs:{id:"五、vue中为数组、对象动态添加或修改元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、vue中为数组、对象动态添加或修改元素"}},[t._v("#")]),t._v(" 五、Vue中为数组、对象动态添加或修改元素")]),t._v(" "),e("h3",{attrs:{id:"_1-数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组"}},[t._v("#")]),t._v(" 1.数组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let vm = new Vue({\n    el: '#app',\n    data: {\n        arrList: ['a', 'b', 'c']\n    }\n})\n")])])]),e("p",[t._v("vue中直接操作：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vm.arrList[1] = 'd'\n")])])]),e("p",[t._v("是无效的。")]),t._v(" "),e("ol",[e("li",[t._v("vue中动态操作数组的方法只有七个：")])]),t._v(" "),e("ul",[e("li",[t._v("push  尾部添加")]),t._v(" "),e("li",[t._v("pop   尾部删除")]),t._v(" "),e("li",[t._v("unshift 头部添加")]),t._v(" "),e("li",[t._v("shift 头部删除")]),t._v(" "),e("li",[t._v("splice    增删改原数组")]),t._v(" "),e("li",[t._v("sort  排序")]),t._v(" "),e("li",[t._v("reverse   倒序")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("或者使用vue提供的set方法：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.set(vm.arrList, 1, 'd')\n或\nvm.$set(vm.arrList, 1, 'd')\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("或者修改数组的引用，即：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vm.arrlist = ['a', 'd', 'c']\n")])])]),e("p",[t._v("达到将‘b’动态改为‘d’的目的。")]),t._v(" "),e("h3",{attrs:{id:"_2-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象"}},[t._v("#")]),t._v(" 2.对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let vm = new Vue({\n    el: '#app',\n    data: {\n        arrList: {\n            userInfo: {\n                name: 'Jerry',\n                age: '28',\n                gender: 'male'\n            }\n        }\n    }\n})\n")])])]),e("p",[t._v("vue中直接操作：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vm.userInfo.age = '29'\n")])])]),e("p",[t._v("是无效的。")]),t._v(" "),e("ol",[e("li",[t._v("vue中提供了set方法来动态修改对象：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.set(vm.userInfo, 'age', '29')\n或\nvm.$set(vm.userInfo, 'age', '29')\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("或者修改对象的引用，即：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vm.userInfo = {\n                name: 'Jerry',\n                age: '29',\n                gender: 'male'\n            }\n")])])]),e("p",[t._v("达到将‘28’动态改为‘29’的目的。")]),t._v(" "),e("h2",{attrs:{id:"六、组件间数据传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、组件间数据传递"}},[t._v("#")]),t._v(" 六、组件间数据传递")]),t._v(" "),e("h3",{attrs:{id:"_1-父组件向子组件传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-父组件向子组件传值"}},[t._v("#")]),t._v(" 1.父组件向子组件传值")]),t._v(" "),e("p",[t._v("通过属性传值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<child :prop-name=\"1\"></child>\n\nVue.conponent('child', {\n    props: [ propName ]\n    template: '<div>{{propName}}</div>''\n})\n")])])]),e("h3",{attrs:{id:"_2-子组件向父组件传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件向父组件传值"}},[t._v("#")]),t._v(" 2.子组件向父组件传值")]),t._v(" "),e("p",[t._v("通过事件触发")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<child @change=\"handleChange\"></child>\n\nVue.conponent('child', {\n    template: '<div onclick=\"handleClick\">1</div>',\n    methods: {\n        handleClick: function() {\n            this.$emit('change', 2)\n        }\n    }\n})\n\nmethods: {\n    handleChange: function(value) {\n        alert(value)    // 2\n    }\n}\n")])])]),e("h2",{attrs:{id:"非父子组件间传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非父子组件间传值"}},[t._v("#")]),t._v(" 非父子组件间传值")]),t._v(" "),e("p",[t._v("通过发布订阅模式——总线机制")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<child content=\"Jerry\"></child>\n<child content=\"Zhang\"></child>\n\n// 创建总线\nVue.prototype.bus = new Vue()\n\nVue.conponent('child', {\n    props: {\n        content: String\n    },\n    data: function() {\n        return {\n            selfContent: content    // 子组件不可直接操作父组件传递的参数\n        }\n    },\n    template: '<div onclick=\"handleClick\">{{selfContent}}</div>',\n    methods: {\n        handleClick: function() {\n            this.bus.$emit('change', selfContent)   // 发布至总线\n        }\n    },\n    mounted: {\n        var self = this\n        this.bus.$on('change', function(msg) {  // 总线上订阅\n            self.selfContent = msg\n        })\n    }\n})\n")])])]),e("h2",{attrs:{id:"七、组件使用细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、组件使用细节"}},[t._v("#")]),t._v(" 七、组件使用细节")]),t._v(" "),e("h3",{attrs:{id:"_1-使用is属性解决标签渲染小bug"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用is属性解决标签渲染小bug"}},[t._v("#")]),t._v(" 1. 使用is属性解决标签渲染小bug")]),t._v(" "),e("p",[t._v("让is等于子组件名")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<table>\n    <tbody>\n        <tr is="row"></tr>\n        <tr is="row"></tr>\n        <tr is="row"></tr>\n    <tbody>\n</table>\n\nVue.component(\'row\', {\n    template: \'<tr><td>this is a row</td></tr>\'\n})\n')])])]),e("h3",{attrs:{id:"_2-子组件中的data必须是函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件中的data必须是函数"}},[t._v("#")]),t._v(" 2. 子组件中的data必须是函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.component('row', {\n    data: function() {\n        return {\n            content: 'this is a row'\n        }\n    },\n    template: '<tr><td>{{content}}</td></tr>'\n})\n")])])]),e("p",[t._v("原因是：子组件不同与根组件只被调用一次，子组件会被多次调用，而每次调用时数据应该是独立的，不能是同一个数据（同一个数据会导致一个组件的数据改变了，其它子组件数据也会受到影响）。通过返回一个对象，实现每个子组件拥有一个独立的数据存储。")]),t._v(" "),e("h3",{attrs:{id:"_3-通过ref实现必要的dom操作-获取dom节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-通过ref实现必要的dom操作-获取dom节点"}},[t._v("#")]),t._v(" 3. 通过ref实现必要的dom操作（获取dom节点）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div ref="hello" @click="handleClick">\n    hello world\n</div>\n\nmethods: {\n    handleClick: function() {\n        console.log( this.$refs.hello.innerHtml )  // hello world\n    }\n}\n')])])]),e("p",[t._v("若ref添加在子组件上，获得的是组件实例的引用：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<row ref=\"one\" @click=\"handleClick\"></row>\n\nVue.component('row', {\n    data: function() {\n        return {\n            number: 1\n        }\n    },\n    template: '<div>{{number}}</div>'\n})\n\n\nmethods: {\n    handleClick: function() {\n        console.log( this.$refs.one )   // 得到的是row组件实例\n        console.log( this.$ress.one.number )    // 得到的是row组件实例的数据number\n    }\n}\n")])])]),e("h3",{attrs:{id:"_4-父组件通过属性向子组件传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-父组件通过属性向子组件传递数据"}},[t._v("#")]),t._v(" 4. 父组件通过属性向子组件传递数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<counter :count="12"></counter>     // 当加“:”时，传递的是数字12，不加“:”时，传递的是字符串"12"。\n')])])]),e("p",[t._v('原因：添加“:”即v-bind:count="12"，v-bind会使得引号里的是一个表达式。')]),t._v(" "),e("h2",{attrs:{id:"八、生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、生命周期"}},[t._v("#")]),t._v(" 八、生命周期")]),t._v(" "),e("blockquote",[e("p",[t._v("生命周期函数就是Vue实例在某个时间点会自动执行的函数")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let vm = new Vue({\n    el: '#app',\n    // beforeCreate 初始化事件、生命周期相关内容后(基础初始化)\n    beforeCreate: function() {\n        console.log('beforeCreate')\n    },\n    // created 初始化依赖注入(provide/inject)、双向绑定相关内容\n    created: function() {\n        console.log('created')\n    },\n    // beforeMount 将模板和数据挂载到挂载点进行渲染之前\n    beforeMount: function() {\n        console.log('beforeMount')\n    },\n    // mounted 页面挂载之后\n    mounted: function() {\n        console.log('mounted')\n    },\n    // deforeDestroy 当调用vm.$destroy()即将销毁实例时\n    deforeDestroy: function() {\n        console.log('deforeDestroy')\n    },\n    // destroyed 当调用vm.$destroy()已经销毁实例时\n    destroyed: function() {\n        console.log('destroyed')\n    },\n    // beforeUpdate 数据改变，虚拟dom重新渲染之前\n    beforeUpdate: function() {\n        console.log('beforeUpdate')\n    },\n    // updated 数据改变，虚拟don重新渲染之后\n    updated: function() {\n        console.log('updated')\n    }\n})\n")])])]),e("h2",{attrs:{id:"九、其它基础知识汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、其它基础知识汇总"}},[t._v("#")]),t._v(" 九、其它基础知识汇总")]),t._v(" "),e("h3",{attrs:{id:"_1-块元素自适应撑开高度-块元素防抖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-块元素自适应撑开高度-块元素防抖"}},[t._v("#")]),t._v(" 1.块元素自适应撑开高度(块元素防抖)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("overflow: hidden;   // 当poadding-bottom百分比值计算的不准确时，可隐藏超出的部分\nwidth: 100%;\nheight: 0;\npoadding-bottom: 30%;   // padding取值为百分比时，参照的是父元素的宽度\n")])])]),e("p",[t._v("或")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("width: 100%;\nheight: 30vw;   // 浏览器兼容性不好\n")])])]),e("h3",{attrs:{id:"_2-vue中scoped的样式穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue中scoped的样式穿透"}},[t._v("#")]),t._v(" 2.Vue中scoped的样式穿透")]),t._v(" "),e("p",[t._v("当我们想要在父组件scoped限定的style中，修改子组件的样式时，可使用样式穿透符‘>>>’")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".father-classname >>> .son-classname {\n    background: #fff;\n}\n")])])]),e("h3",{attrs:{id:"_3-flex布局内容不超出外层容器方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-flex布局内容不超出外层容器方法"}},[t._v("#")]),t._v(" 3.flex布局内容不超出外层容器方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 为元素设置\nmin-width: 0;\n")])])]),e("h3",{attrs:{id:"_4-循环中的ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-循环中的ref"}},[t._v("#")]),t._v(" 4.循环中的ref")]),t._v(" "),e("p",[t._v("通过this.$refs.name获取的循环中的ref，得到的是一个数组，需要获取该数据的第0个元素才行。")]),t._v(" "),e("h3",{attrs:{id:"_5-通过函数节流提高代码性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-通过函数节流提高代码性能"}},[t._v("#")]),t._v(" 5.通过函数节流提高代码性能")]),t._v(" "),e("p",[e("code",[t._v("if (this.timer) { clearTimeout(this.timer) } this.timer = setTimeout(() => { ... }, 16)")])]),t._v(" "),e("blockquote",[e("p",[t._v("由于现在广泛使用的屏幕都有固定的刷新率（比如最新的一般在 60Hz），在两次硬件刷新之间浏览器进行两次重绘是没有意义的只会消耗性能。浏览器会利用这个间隔 16ms（1000ms/60）适当地对绘制进行节流， 因此 16ms 就成为页面渲染优化的一个关键时间。")])]),t._v(" "),e("h3",{attrs:{id:"_6-vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-vuex"}},[t._v("#")]),t._v(" 6.vuex")]),t._v(" "),e("p",[e("strong",[t._v("核心思想")]),t._v("：将应用程序的所有组件状态（或公共数据）集中存储在state对象中，通过特定的接口改变state中的公共数据，从而实现相应组件状态/数据的改变。")]),t._v(" "),e("p",[e("strong",[t._v("核心概念")]),t._v("：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("State")]),t._v(" - 用于集中存储状态/数据的对象。")]),t._v(" "),e("li",[e("strong",[t._v("Getter")]),t._v(" - 用于根据state中的值，计算出新的值。相当于vue中的计算属性computed。")]),t._v(" "),e("li",[e("strong",[t._v("Mutations")]),t._v(" - 用于集中存放修改state值的事件方法，这些方法通过store.commit('funName', canshu)来触发。")]),t._v(" "),e("li",[e("strong",[t._v("Actions")]),t._v(" - 用于存放提交Mutations的事件方法，这些方法通过store.dispatch('funName', canshu)来触发。")]),t._v(" "),e("li",[e("strong",[t._v("Module")]),t._v(" - 用于将复杂store分隔成模块，每个模块具有完整的vuex属性(state、getter、mutations、actions)。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);