(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{427:function(n,e,a){"use strict";a.r(e);var t=a(44),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"文件上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件上传"}},[n._v("#")]),n._v(" 文件上传")]),n._v(" "),a("h3",{attrs:{id:"第一种-form-表单上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种-form-表单上传"}},[n._v("#")]),n._v(" 第一种：form 表单上传")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("    <form action='/ajax/upload' enctype=\"multipart/form-data\" type='post' target='uploader'>\n    　　<input type='file'>\n    　　<input type='hidden' name='userid' value='123'>\n    　　<input type='hidden' name='username' value='abc'>\n    　　<input type='submit' value='Submit'>\n    </form>\n    <iframe id='uploader'></iframe>\n")])])]),a("p",[n._v("小技巧：为 form 设置 target='xxx'，xxx 与空 iframe 的id一致，可以避免表单提交后刷新页面。")]),n._v(" "),a("h3",{attrs:{id:"第二种-formdata-ajax-上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二种-formdata-ajax-上传"}},[n._v("#")]),n._v(" 第二种：FormData + ajax 上传")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("    <input type='file' id='file'>\n    <input type='button' onclick='handleSubmit()'>\n\n    function handleSubmit() {\n        const file = document.getElementById('file').files[0]   // blob 数据，即二进制大数据\n        const formData = new FormData()\n        formData.append('userid', '123')\n        formData.append('file', file)\n        // ajax post 发送\n        const xhr = new XMLHttpRequest()\n    　　xhr.open('POST', '/ajax/upload')\n    　　xhr.onload = function () {\n    　　　　if (xhr.status === 200) {\n    　　　　　　console.log('上传成功');\n    　　　　} else {\n    　　　　　　console.log('出错了');\n    　　　　}\n    　　};\n    　　xhr.send(formData)\n    }\n")])])]),a("h3",{attrs:{id:"第三种-利用-h5-的-filereader-上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三种-利用-h5-的-filereader-上传"}},[n._v("#")]),n._v(" 第三种：利用 H5 的 FileReader 上传")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("    <div id='preview'></div>\n    <input type='file' id='file'>\n    <input type='button' onclick='handleSubmit()'>\n\n    function handleSubmit() {\n        const file = document.getElementById('file').files[0]   // blob 数据，即二进制大数据\n        const reader = new FileReader()\n        reader.readAsDataURL(file)\n        reader.onload = function(e) {\n            const data = e.target.result    // base64 数据，假如该文件为图片，此时拿到上传的数据后就可以做预览功能了\n            // 图片预览\n            document.getElementById('preview').\n            // ajax post 发送\n            const xhr = new XMLHttpRequest()\n        　　xhr.open('POST', '/ajax/upload')\n        　　xhr.onload = function () {\n        　　　　if (xhr.status === 200) {\n        　　　　　　console.log('上传成功');\n        　　　　} else {\n        　　　　　　console.log('出错了');\n        　　　　}\n        　　};\n        　　xhr.send(data)\n        }\n    }\n")])])]),a("blockquote",[a("p",[n._v("上传图片是可能遇到的问题：")])]),n._v(" "),a("ol",[a("li",[a("p",[n._v("格式转化")])]),n._v(" "),a("li",[a("p",[n._v("图片压缩")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v(" // 思路：利用 canvas 实现压缩  file(blob) -> base64 -> image -> canvas压缩 -> base64\n\n /**\n  * fileId - 上传文件的元素id\n  * rate - 压缩率 小于1-压缩 大于1-放大\n **/\n async function compressPic(fileId, rate) {\n     // 1.获取 blob\n     const file = document.getElementById(fileId).files[0]   // blob-二进制大数据\n     // 2.blob 转 base64\n     const bs64 = await blob2Base(file).then((e) => {\n         return e.target.result    // base64\n     })\n     console.log(bs64)           \n     // 3.base64 转 image\n     const img = base2Img(bs64)\n     // 4.image 转 canvas\n     const canvas = await img2Canvas(img).then(() => {\n         const canvas = document.createElement('canvas')\n         canvas.width = img.width\n         canvas.height = img.height \n         return canvas\n     })\n     // 5.压缩并得到压缩后的base64\n     const newBs64 = doCompress(canvas, img, rate)\n     return newBs64\n }\n\n function blob2Base(file) {\n     return new Promise((resolve, reject) => {\n         const reader = new FileReader()\n         reader.readAsDataURL(file)\n         reader.onload = (e) => resolve(e)\n         reader.onerror = () => reject('加载失败')\n     })\n }\n\n function base2Img(bs64) {\n     const img = new Image()\n     img.crossOrigin = ''\n     img.src = bs64\n     return img\n     \n }\n\n function img2Canvas(img) {\n     return new Promise((resolve, reject) => {  \n         img.onload = () => resolve()\n         img.onerror = () => reject('加载失败')\n     })\n }\n\n function doCompress(canvas, img, rate) {\n     const ctx = canvas.getContext('2d')\n     const canvaswidth = img.width * rate\n     const canvasheight = img.height * rate\n     canvas.width = canvaswidth\n     canvas.height = canvasheight\n     ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvaswidth, canvasheight)\n     const ext = img.src.substring(img.src.lastIndexOf('.') + 1).toLowerCase()\n     const dataURL = canvas.toDataURL('image/' + ext)\n     return dataURL\n }\n\n async function getData() {\n     const data = await compressPic('upload', 0.1)\n     console.log(data)\n }\n\n document.getElementById('upload').addEventListener('change', function() {\n     getData()\n })\n")])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);