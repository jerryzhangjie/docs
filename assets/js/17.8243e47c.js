(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{373:function(r,n,t){"use strict";t.r(n);var e=t(44),a=Object(e.a)({},(function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h2",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[r._v("#")]),r._v(" 字符串")]),r._v(" "),t("blockquote",[t("p",[r._v("字符串方法，都不会改变原始值！！！")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[r._v('var str="hello world";\n\n\x3c!-- 查找 --\x3e\nstr[1]                      //e ie8+，返回给定位置的字符 (只读方法，赋值无效)\nstr.charAt(1)               //e 返回给定位置的字符\nstr.charCodeAt(1)           //101 返回给定位置字符的Unicode编码\nString.fromCharcode(code)   //将Unicode编码转为字符，与 charCodeAt 相反\nstr.indexOf(str1[,start])   //返回字符(串)首次出现的位置，未查到返回-1，从左向右查 (lastIndexOf是从右向左)(参数只能是字符串，不能是正则)\nstr.match(String/Reg)       //返回存放匹配结果的数组 (参数可为字符串或正则)  Reg 尽量带着 g 标识，否则获得数据比较怪异\nstr.search(String/Reg)      //返回匹配字符(串)首次出现的位置，未查到返回-1 (参数是字符串或正则) 会忽略 Reg 中的 g，总是返回首次出现的位置\n\n\x3c!-- 拼接 --\x3e\nstr.concat(str1[,str2 ...]) //返回拼接后的字符串\n\n\x3c!-- 截取 --\x3e\nstr.slice(start[,end])      //返回截取字符串 (参数为负数时，从结尾开始，这是与substring的唯一区别)\nstr.substring(start[,end])  //返回截取字符串 (参数为负数时，从0开始，这是与slice的唯一区别)\nstr.substr(start[,length])  //返回截取字符串 (length为负时，返回空)\n\n\x3c!-- 替换 --\x3e\nstr.replace(str1/Reg, str2) //返回替换后的字符串 (第一个参数是查找的字符串或正则，第二个参数是要替换的字符串)\n\n\x3c!-- 转数组 --\x3e\nstr.split(separator[,len])    //返回分隔后的数组 (第一个参数是分隔符，可以是字符串或正则，第二个参数可选，是数组大小)\n\n\x3c!-- 大小写 --\x3e\nstr.toLowerCase()           //返回转为小写的字符串\nstr.toUpperCase()           //返回转为大写的字符串\n\n\x3c!-- 去空格 --\x3e\nstr.trim()                  //返回删除首末空格的字符串\n\n\x3c!------------------------ ES6 新增 -------------------------\x3e\n\nstr.includes(str1[,start])      //返回布尔值，表示是包含参数字符串 (第二个参数表示开始搜索位置)\nstr.startsWith(str1[,start])    //返回布尔值，表示参数字符串是否在开头 (第二个参数表示开始搜索位置)\nstr.endsWith(str1[,end])        //返回布尔值，表示参数字符串是否在结尾 (第二个参数表示结束搜索位置，即只在 end 之前搜索)\nstr.repeat(n)                   //返回重复n次的字符串\nstr.padStart(len, str1)         //返回在头部补全的字符串 (len为补全后长度，str1为用于补全的字符串)\nstr.padEnd(len, str1)           //返回在尾部补全的字符串 (len为补全后长度，str1为用于补全的字符串)\n')])])]),t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[r._v("#")]),r._v(" 数组")]),r._v(" "),t("blockquote",[t("p",[r._v("⭐️表示该方法会改变原数组，称为“变异方法”；其它方法不会改变原数组，称为“非变异方法”")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[r._v("var arr = ['a', 'b', 'c', 'd', 'e']\n\n\x3c!-- 增、删、改、查 --\x3e\narr[1]                      //查询、读取\narr[5] = 'e'                //增加\narr[1] = 'm'                //修改\narr.indexOf(item[,start])   //返回元素首次出现的位置，未查到返回-1，从左向右查 (lastIndexOf是从右向左)\narr.push('xx')              //尾部插入参数字符串，返回数组新的长度，会改变原数组⭐️\narr.pop()                   //尾部删除一个元素，返回删除的元素，会改变原数组⭐️\narr.unshift('xx')           //头部插入参数字符串，返回数组新的长度，会改变原数组⭐️\narr.shift()                 //头部删除一个元素，返回删除的元素，会改变原数组⭐️\narr.sort()                  //返回排序后的数组 (转换成ASCII码进行对比)，会改变原数组⭐️\narr.reverse()               //返回顺序颠倒的数组，会改变原数组⭐️\narr.splice(start,deleteNum,…items)    //数组万能方法(插入、删除、替换)，返回删除的元素，会改变原数组⭐️\narr.slice(start[,end])                //返回子数组（slice(0)可实现复制数组）\n\n\x3c!-- 转字符串 --\x3e\narr.join([separator])                 //返回拼接后的字符串，分隔符参数可选\narr.toString()                        //返回逗号拼接的字符串\n\n\x3c!-- 拼接 --\x3e\narr.concat(arr1[,arr2 ...])           //返回拼接后的数组\n\narr.every(function)         //返回布尔值，每一项都符合function，则为true，否则false\narr.some(function)          //返回布尔值，只要有符合function的项，则为true，否则false\narr.filter(function)        //返回符合function的新数组\narr.flat(depth)             //展开多维数组(depth为展开深度，默认为1)，返回新数组 注：arr.flat()可删除空元素\narr.flatMap(function)       //展开多维数组(depth为1)，并操作每个元素，返回新数组\narr.forEach(function)       //遍历每个元素，无返回值\narr.map(function)           //返回每个元素执行function后的新数组\narr.reduce(function)        //依次遍历每个元素，执行function(累计器，当前元素)，返回单个值\n\nArray.isArray(arr)          //判断arr是不是数组，返回布尔值\n\n\x3c!------------------------ ES6新增 -------------------------\x3e\n\narr.copyWithin(target[,start][,end])  //读取start至end的元素，从target开始替换元素，返回新数组，会改变原数组⭐️\narr.find(function)          //返回第一个符合function条件的元素，若无则返回undefined\narr.findIndex(function)     //返回第一个符合function条件的元素位置，若无则返回-1\narr.includes(item[,start])  //返回布尔值，表示是否包含某元素 (第二个参数表示开始搜索位置)\narr.fill(item[,start][,end])//用给定的元素item，填充数组的start至end位置，会改变原数组⭐️\narr.keys()        //遍历数组，返回元素为索引值的可遍历对象\narr.values()      //遍历数组，返回元素为元素值的可遍历对象\narr.entries()     //遍历数组，返回元素为键值对的可遍历对象\n\nArray.from(obj)               //用于将“类数组”、可遍历对象转换为数组\nArray.of(item1,item2,...)     //用于将一些元素，组装成数组\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);