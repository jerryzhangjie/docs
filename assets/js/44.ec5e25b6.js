(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{401:function(e,a,t){"use strict";t.r(a);var r=t(44),v=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"缓存位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[e._v("#")]),e._v(" 缓存位置")]),e._v(" "),t("p",[e._v("从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。")]),e._v(" "),t("ul",[t("li",[e._v("Service Worker")]),e._v(" "),t("li",[e._v("Memory Cache")]),e._v(" "),t("li",[e._v("Disk Cache")]),e._v(" "),t("li",[e._v("Push Cache")])]),e._v(" "),t("ol",[t("li",[e._v("Service Worker")])]),e._v(" "),t("p",[e._v("Service Worker 是运行在浏览器背后的独立 Worker 线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),e._v(" "),t("ul",[t("li",[e._v("https://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("Memory Cache\n内存缓存是一种比较特殊的缓存，他不受max-age、no-cache等配置的影响，即使我们不设置缓存，如果当前的内存空间比较充裕的话，一些资源还是会被缓存下来。但这种缓存是暂时的，一旦关闭了浏览器，这一部分用于缓存的内存空间就会被释放掉。如果真的不想使用缓存，可以设置 Cache-Control: no-store，这样，即便是内存缓存，也不会生效。\n（注意：这部分内存空间在浏览器关闭时才会释放，仅关闭tab不会释放，所以关闭‘baidu.com’的tab，在另一个tab再打开‘baidu.com’依然会从加载缓存）\n内存缓存虽然比较高效，但还是受限于计算机内存的大小，所以能让我们使用的内存并不多，这个时候就需要硬盘来存储大量的缓存。")])]),e._v(" "),t("li",[t("p",[e._v("Disk Cache\nDisk Cache 也就是存储在硬盘中的缓存。相比较内存缓存的优势就是长时效。\n它会根据HTTP Header中设置的字段类型，来判断资源是否需要重新请求。\n如果当前内存使用率高的话，请求资源大概率会被缓存到disk cache。")])])]),e._v(" "),t("h2",{attrs:{id:"dns-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns-缓存"}},[e._v("#")]),e._v(" DNS 缓存")]),e._v(" "),t("p",[e._v("浏览器缓存通常是指 HTTP 缓存，在讲 HTTp 缓存前，先来了解下浏览器中可能存在的另外一种缓存 DNS 缓存。")]),e._v(" "),t("p",[e._v("DNS (Domain Name System)，即域名系统。")]),e._v(" "),t("p",[e._v("DNS 解析作用：域名 ——> IP")]),e._v(" "),t("p",[e._v("DNS 解析过程：")]),e._v(" "),t("ul",[t("li",[e._v("查询浏览器 DNS 缓存")]),e._v(" "),t("li",[e._v("查询系统 host 中是否有域名-IP映射")]),e._v(" "),t("li",[e._v("查询本地（通常是网络服务商）DNS 服务器")]),e._v(" "),t("li",[e._v("查询根 DNS 服务器")])]),e._v(" "),t("h2",{attrs:{id:"http-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[e._v("#")]),e._v(" HTTP 缓存")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://jerryzhangjie.github.io/docs/technology/1.%20%E5%89%8D%E7%AB%AF/1.5%20%E7%BD%91%E7%BB%9C/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP缓存机制详见这篇文章"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("这里重点要讨论的是 HTTP 缓存在浏览器中的存储机制，先看一张浏览器缓存的流程图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/2547366513-5c452d63f3ade_fix732.png",alt:""}})]),e._v(" "),t("p",[e._v("第一次请求资源：")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("总是优先查询缓存")]),e._v("，无缓存才会向服务器请求资源；")]),e._v(" "),t("li",[t("strong",[e._v("获取响应后根据对应策略缓存资源")]),e._v("，此时会涉及资源存储位置问题：\n"),t("ul",[t("li",[e._v("头字段要求缓存（强缓存或协商缓存）的资源，会被存入硬盘中(Disk Cache)")]),e._v(" "),t("li",[e._v("头字段未要求缓存的资源、头字段要求缓存且体积比较小、浏览器认为会频繁使用的资源，会被存入内存中(Memory Cache)")])])])]),e._v(" "),t("p",[e._v("也就是说，被存入内存中的资源，如果也是要求缓存的资源，那么它也会被存入硬盘中。我们可以验证这个结论：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("打开一个页面，查看资源请求，所有资源都是从服务端获得")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/Screenshot0616-2019.jpg",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("F5 刷新页面，有些资源从内存中获取，可见步骤1中，资源缓存入了内存中")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/Screenshot0616-2020.jpg",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("关闭浏览器（此时内存中的缓存会被清除），重新打开该页面，发现之前内存中的资源从硬盘中获取")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/jerry-zhang/image-database/raw/master/img/Screenshot0616-2021.jpg",alt:""}})])])]),e._v(" "),t("p",[e._v("可见我们的结论是正确的。")]),e._v(" "),t("h2",{attrs:{id:"用户行为对浏览器缓存的影响"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户行为对浏览器缓存的影响"}},[e._v("#")]),e._v(" 用户行为对浏览器缓存的影响")]),e._v(" "),t("p",[e._v("所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：")]),e._v(" "),t("ul",[t("li",[e._v("打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。")]),e._v(" "),t("li",[e._v("普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)，其次才是 disk cache。")]),e._v(" "),t("li",[e._v("强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache)，服务器直接返回 200 和最新内容。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);