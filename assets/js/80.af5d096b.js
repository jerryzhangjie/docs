(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{435:function(a,e,t){"use strict";t.r(e);var n=t(44),r=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"一、什么是跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是跨域"}},[a._v("#")]),a._v(" 一、什么是跨域")]),a._v(" "),t("blockquote",[t("p",[a._v("跨域是指，由于浏览器的同源策略限制，将会阻止一个域的脚本与另一个域的内容获取及交互操作。")])]),a._v(" "),t("p",[a._v("同源是指协议、域名、端口均相等，同源策略是浏览器安全机制的基础。常见的同源限制包括：")]),a._v(" "),t("ul",[t("li",[a._v("无法读取非同源网页的 cookie、localStorage、sessionStorage、indexedDB；")]),a._v(" "),t("li",[a._v("无法获取非同源网页的 DOM；")]),a._v(" "),t("li",[a._v("无法向非同源地址发送 Ajax 请求（其实请求可以成功发出，只是同源策略禁止读取跨域地址返回的响应）。")])]),a._v(" "),t("p",[a._v("其实，同源策略的本质是，一个域名下的 js，在未经允许的情况下，不得读取另一个域名的内容(也就是不给其它域操控当前域的机会，从而确保自身安全)。但是并不阻止向另一域名发送内容。"),t("br"),a._v("\n这也就是为什么 from 表单可以跨域提交数据，而 ajax 却不能完成跨域请求。"),t("br"),a._v("\n(from 表单提交后，是不会有任何数据返回，也就不会读到另一个域的数据，就不会受到同源策略的限制。而 ajax 发送跨域请求后，是一定会返回响应报文的，也就会读到另一个域的数据，这就违背了同源策略的限制。)")]),a._v(" "),t("h2",{attrs:{id:"二、如何实现跨域通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、如何实现跨域通信"}},[a._v("#")]),a._v(" 二、如何实现跨域通信")]),a._v(" "),t("p",[a._v("常用方案：")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#1-jsonp"}},[a._v("1. jsonp")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#2-cors"}},[a._v("2. CORS")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#3-websocket"}},[a._v("3. WebSocket")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#4-documentdomain--iframe"}},[a._v("4. document.domain + iframe")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#5-locationhash--iframe"}},[a._v("5. location.hash + iframe")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#6-windowname--iframe"}},[a._v("6. window.name + iframe")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#7-postmessage--iframe"}},[a._v("7. postMessage + iframe")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#8-nginx%E4%BB%A3%E7%90%86"}},[a._v("8. nginx代理")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#9-nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86"}},[a._v("9. nodejs中间件代理")])])]),a._v(" "),t("h3",{attrs:{id:"_1-jsonp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsonp"}},[a._v("#")]),a._v(" 1. jsonp")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理：浏览器允许三个html标签跨域加载资源，分别是：link、script、img。基于此特性，可以通过动态创建 script 标签，加载一个带有回调函数名称的地址，实现跨域通信。")])]),a._v(" "),t("p",[a._v("(1) 原生实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    var script = document.createElement('script');\n\n    script.src = 'http://www.jerryzhang.com:8080/login?user=admin&callback=handleCallback';\n    document.body.appendChild(script);\n\n    // 回调执行函数\n    function handleCallback(res) {\n        alert(JSON.stringify(res));\n    }\n")])])]),t("p",[a._v("服务端返回数据如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('    handleCallback({"status": true, "user": "admin"})\n')])])]),t("p",[a._v("前端获取服务端返回的数据，即可执行预先定义的回调函数，拿到参数中的数据。")]),a._v(" "),t("p",[a._v("(2) jquery ajax")]),a._v(" "),t("p",[a._v("ajax 本身只能同源使用，而 ajax 的 jsonp 只是对动态创建 script 标签实现 jsonp 的封装。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    $.ajax({\n        url:'http://www.jerryzhang.com/login',\n        type:'GET',\n        dataType:'jsonp',   // 请求方式为 jsonp，此时 ajax 与 XMLHttpRequest 无关，只是对动态创建 script 标签实现 jsonp 的封装。\n        jsonpCallback:'callback',\n        data:{\n            \"username\":\"jerryzhang\"\n        }\n    })\n")])])]),t("p",[a._v("jsonp 缺陷：")]),a._v(" "),t("ul",[t("li",[a._v("仅支持跨域 http/https 请求，不支持跨域 js 交互（如获取另一个域中的 DOM 节点）；")]),a._v(" "),t("li",[a._v("仅支持 get 请求 （为什么？ 因为：jsonp 的实现原理核心是 script 标签，而 script 仅支持 get 方式加载资源，所以 jsonp 仅支持 get！）")])]),a._v(" "),t("p",[a._v("若需要支持 get 之外的其它 http/https 跨域请求，可选择 CORS。")]),a._v(" "),t("h3",{attrs:{id:"_2-cors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cors"}},[a._v("#")]),a._v(" 2. CORS")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理："),t("code",[a._v("CORS")]),a._v("全称“跨域资源共享”（Cross-origin resource sharing），能实现任意方式（get、post、put等）的 http/https 请求。")])]),a._v(" "),t("p",[a._v("关于"),t("code",[a._v("CORS")]),a._v("的更多细节，可参考阮一峰的"),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("跨域资源共享 CORS 详解"),t("OutboundLink")],1),a._v("。"),t("br"),a._v("\n对于前端开发者来说，"),t("code",[a._v("CORS")]),a._v("通信与同源"),t("code",[a._v("AJAX")]),a._v("通信没有区别，浏览器一旦发现"),t("code",[a._v("AJAX")]),a._v("请求跨域，就会"),t("strong",[a._v("自动添加")]),a._v("一些附加的请求头信息(非简单请求时还会多发一次预检请求)。目前，IE10+及主流浏览器都支持"),t("code",[a._v("CORS")]),a._v("。"),t("code",[a._v("CORS")]),a._v("通信的关键是服务端实现支持"),t("code",[a._v("CORS")]),a._v("的接口。")]),a._v(" "),t("p",[t("code",[a._v("CORS")]),a._v("请求分为两种："),t("strong",[a._v("简单请求")]),a._v("和"),t("strong",[a._v("非简单请求")]),a._v("。浏览器对两种请求的处理不同。")]),a._v(" "),t("p",[a._v("同时满足以下两个条件的，就是简单请求：")]),a._v(" "),t("ul",[t("li",[a._v("请求方法为 "),t("code",[a._v("HEAD")]),a._v("、"),t("code",[a._v("GET")]),a._v("、"),t("code",[a._v("POST")]),a._v("中任意一种；")]),a._v(" "),t("li",[a._v("头信息中只包含"),t("code",[a._v("Accept")]),a._v("、"),t("code",[a._v("Accept-Language")]),a._v("、"),t("code",[a._v("Content-Language")]),a._v("、"),t("code",[a._v("Last-Event-ID")]),a._v("、"),t("code",[a._v("Content-Type(值为application/x-www-form-urlencoded、multipart/form-data、text/plain)")]),a._v("。")])]),a._v(" "),t("p",[a._v("不满足上述两个条件的，就是非简单请求。")]),a._v(" "),t("p",[t("strong",[a._v("2.1 简单请求")]),a._v("\n基本流程"),t("br"),a._v("\n当浏览器发现这次跨域"),t("code",[a._v("AJAX")]),a._v("请求为简单请求时，就自动在头信息之中，添加一个"),t("code",[a._v("Origin")]),a._v("字段，用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。")]),a._v(" "),t("p",[t("strong",[a._v("2.2 非简单请求")]),a._v("\n常见非简单请求")]),a._v(" "),t("ul",[t("li",[a._v("put、delete方法的ajax请求")]),a._v(" "),t("li",[a._v("请求字段为 json 格式(Content-type: application/json)的 post 请求")]),a._v(" "),t("li",[a._v("带自定义头字段的ajax请求，假设带自定义字段 x-custom-header")])]),a._v(" "),t("p",[a._v("对应解决方法（均为服务端设置）：")]),a._v(" "),t("ul",[t("li",[a._v("access-control-allow-methods: PUT,DELETE")]),a._v(" "),t("li",[a._v("access-control-allow-header: Content-type")]),a._v(" "),t("li",[a._v("access-control-allow-header: x-custom-header")])]),a._v(" "),t("h3",{attrs:{id:"_3-websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-websocket"}},[a._v("#")]),a._v(" 3. WebSocket")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理："),t("code",[a._v("WebSocket")]),a._v("实现了浏览器与服务器的全双工通信，同时允许跨域通信，是"),t("code",[a._v("seaver push")]),a._v("技术的很好实现。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('    // 前端代码\n    var ws = new WebSocket("wss://echo.websocket.org");\n\n    ws.onopen = function(evt) { \n        console.log("Connection open ..."); \n        ws.send("Hello WebSockets!");\n    };\n\n    ws.onmessage = function(evt) {\n        console.log( "Received Message: " + evt.data);\n        ws.close();\n    };\n\n    ws.onclose = function(evt) {\n        console.log("Connection closed.");\n    };   \n')])])]),t("p",[t("code",[a._v("WebSocket")]),a._v("通信需要服务端配合实现。")]),a._v(" "),t("h3",{attrs:{id:"_4-document-domain-iframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-document-domain-iframe"}},[a._v("#")]),a._v(" 4. document.domain + iframe")]),a._v(" "),t("p",[a._v("此方案仅限于主域名相同，子域名不同的跨域场景。eg: http://www.jerryzhang.com/a.html 与 http://child.jerryzhang.com/b.html 主域名都是 jerryzhang.com，子域名分别为 www 和 child。")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理：通过将两个页面的 document.domain 设置成相同的域名(只能设置为公共主域名)，人为的实现同域，避免了跨域。")])]),a._v(" "),t("p",[a._v("父页面：(http://www.jerryzhang.com/a.html)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    <iframe id=\"iframe\" src=\"http://child.jerryzhang.com/b.html\"></iframe>\n    <script>\n        document.domain = 'jerryzhang.com'  // 设置成相同的域名(只能设置为公共主域名)\n        var fatherName = 'jerry'\n        console.log(document.getElementById('iframe').contentWindow.childName)  // 'child'\n    <\/script>\n")])])]),t("p",[a._v("子页面：(http://child.jerryzhang.com/a.html)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    <script>\n        document.domain = 'jerryzhang.com'  // 设置成相同的域名(只能设置为公共主域名)\n        var childName = 'child'\n        console.log(window.parent.fatherName)   // 'jerry'\n    <\/script>\n")])])]),t("p",[a._v("缺陷：")]),a._v(" "),t("ul",[t("li",[a._v("仅适用于主域名相同，子域名不同的跨域场景。")])]),a._v(" "),t("h3",{attrs:{id:"_5-location-hash-iframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-location-hash-iframe"}},[a._v("#")]),a._v(" 5. location.hash + iframe")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理：父页面与 iframe 页面可以读写彼此的 url，而 url 中的 hash 不参与实际 http 请求，且 onhashchange 事件可以监听到 hash 的变化，所以可以将 hash 作为跨域通信的桥梁。")])]),a._v(" "),t("p",[a._v("假设父页面为 http://baidu.com/a.html ，iframe 页面为 http://google.com/b.html")]),a._v(" "),t("p",[a._v("(1) 父页面向 iframe 页面传送数据")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    // 父页面 a.html\n    <iframe id=\"iframe\" src=\"http://google.com/b.html\"></iframe>\n    <script>\n        var iframe = document.getElementById('iframe')\n        iframe.onload = function() {\n            var data = '1010101'\n            iframe.contentWindow.location.hash = data\n        }\n    <\/script>\n\n    // iframe 页面 b.html\n    <script>\n        window.addEventListener('hashchange', (data) => {\n            console.log(location.hash)  // '#1010101'\n        })\n    <\/script>\n")])])]),t("p",[a._v("(2) iframe 页面向父页面传送数据")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("由于跨域情况下，IE、Chrome 不允许直接修改 parent.location.hash，所以需借助一个与父页面同域的隐藏 iframe 页面，作为中间过渡，实现从子向父的数据传递。\n\n    // 父页面 a.html\n    <iframe id=\"iframe\" src=\"http://google.com/b.html\"></iframe>\n    <script>\n        window.addEventListener('hashchange', (data) => {\n            console.log(location.hash)  // '#1010101'\n        })\n    <\/script>\n\n    // iframe 页面 b.html\n    <script>\n        const data = '1010101'\n        try {\n            parent.location.hash = data     // 非 IE、Chrome 可直接修改 parent.location.hash\n        } catch(e) {\n            // 创建与父页面 a.html 同域的隐藏的代理 iframe 页面 proxy.html\n            var ifrproxy = document.createElement('iframe')\n            ifrproxy.style.display = 'none'\n            ifrproxy.src = 'http://baidu.com/proxy.html#data'   // proxy.html 作为代理页面，先接收子页面的数据，再传递给父页面\n            docuemnt.body.appendChild(ifrproxy)\n        }\n    <\/script>\n\n    // 隐藏的代理 iframe 页面 proxy.html，将 b.html 传递来的 data，再传给真正的父页面 a.html\n    <script>\n        parent.parent.location.hash = location.hash.substring(1)\n    <\/script>\n")])])]),t("h3",{attrs:{id:"_6-window-name-iframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-window-name-iframe"}},[a._v("#")]),a._v(" 6. window.name + iframe")]),a._v(" "),t("h3",{attrs:{id:"_7-postmessage-iframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-postmessage-iframe"}},[a._v("#")]),a._v(" 7. postMessage + iframe")]),a._v(" "),t("blockquote",[t("p",[a._v("实现原理："),t("code",[a._v("postMessage()")]),a._v(" 方法提供了一种受控的可以规避同源策略实现跨域通信的机制。IE10及以上")])]),a._v(" "),t("p",[a._v("语法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    targetWindow.postMessage(message, targetOrigin)     // 在目标页面`targetWindow`向目标源`targetOrigin`发送消息`message`\n\n    `targetWindow` 目标页面的引用，例如 iframe 页面的 contentWindow 属性。\n    `message` 要发送到目标源`targetOrigin`的消息。若为对象需序列化成字符串。\n    `targetOrigin` 目标页面`targetWindow`对应的域名。\n")])])]),t("p",[a._v("假设父页面为 http://baidu.com/a.html ，iframe 页面为 http://google.com/b.html")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("    // 父页面 a.html\n    <iframe id=\"iframe\" src=\"http://google.com/b.html\"></iframe>\n    <script>\n        // 向 b.html 发送数据\n        var targetWindow = document.getElementById('iframe')\n        var targetOrigin = 'http://google.com'\n        targetWindow.postMessage('Hello b.html!', targetOrigin)  \n\n        // 接收 a.html 发来的数据\n        window.addEventListener('message', (data) => {      // 监听 message 事件，获取数据\n            console.log(data)  // 'Hello a.html!'\n        })\n    <\/script>\n\n    // iframe 页面 b.html\n    <script>\n        window.addEventListener('message', (data) => {      // 监听 message 事件，获取数据\n            console.log(data)  // 'Hello b.html!'\n\n            // 向 a.html 发送数据\n            var targetOrigin = 'http://baidu.com'\n            window.parent.postMessage('Hello a.html!', targetOrigin)  \n        })\n    <\/script>\n")])])]),t("p",[a._v("安全问题：如果不希望你的网站接收来自别的网站的数据（比如跨域攻击），请确保不要为 message 事件添加监听器。")]),a._v(" "),t("h3",{attrs:{id:"_8-nginx代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-nginx代理"}},[a._v("#")]),a._v(" 8. nginx代理")]),a._v(" "),t("h3",{attrs:{id:"_9-nodejs中间件代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-nodejs中间件代理"}},[a._v("#")]),a._v(" 9. nodejs中间件代理")])])}),[],!1,null,null,null);e.default=r.exports}}]);