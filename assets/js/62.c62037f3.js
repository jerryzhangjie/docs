(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{417:function(e,t,r){"use strict";r.r(t);var n=r(44),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("ul",[r("li",[r("p",[e._v("vue-router是vue.js官方的路由管理器。")])]),e._v(" "),r("li",[r("p",[e._v("使用方法")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 1. 定义路由导航：声明式导航 或 编程式导航\n\x3c!-- 声明式：to指定路由链接，router-link会被渲染成a标签，点击且匹配to成功后，自动添加class属性值.router-link-active --\x3e\n<router-link to=\"/foo\">Go to Foo</router-link>\n\x3c!-- 编程式：js中动态控制路由 --\x3e\nthis.$router.push({path: '/foo'})\n\n// 2. 定义路由出口，即目标组件渲染的位置\n<router-view></router-view>\n\n// 3. 定义或import路由组件\nconst Foo = { template: '<div>foo</div>' } 或 import Foo from './foo'\n\n// 4. 创建router实例，传入routes配置\nconst router = new Router({\n  routes: [\n      {\n        path: '/foo',\n        component: Foo\n      }\n  ]\n})\n\n// 5. 通过router属性将路由实例配置到vue根实例\nconst app = new Vue({\n  el: '#app',\n  router: router\n})\n")])])]),r("ul",[r("li",[r("p",[e._v("任何组件内可通过 "),r("code",[e._v("this.$router")]),e._v(" 访问路由实例，可通过 "),r("code",[e._v("this.$route")]),e._v(" 获取当前路由对象")])]),e._v(" "),r("li",[r("p",[e._v("通过添加“动态路径参数”实现动态路由(场景：多种匹配都映射到同一个组件，例如列表项均跳转至详情页，通过id区别内容)")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const router = new Router({\n  routes: [\n      {\n        \x3c!-- 参数值会被设置到 this.$route.params，并通过this.$route.params.paramName在任意组件中获取 --\x3e\n        path: '/foo:paramName',\n        component: Foo\n      }\n  ]\n})\n")])])]),r("ul",[r("li",[e._v("仅改变“动态路径参数”，由于复用相同组件，想对参数的变化作出响应，有两种方法：")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 1. 组件中监测 $route 路由对象的变化\nwatch: {\n  '$route' (to, from) {\n    // 对路由变化作出响应...\n  }\n}\n// 2. 组件中配置“导航守卫”\nbeforeRouteUpdate (to, from, next) {\n  // 对路由变化作出响应...\n  // 执行next()\n}\n")])])]),r("p",[e._v("详情了解 "),r("a",{attrs:{href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"}},[e._v("导航守卫"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("通过为router路由实例添加children配置项，实现“嵌套路由”")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const User = {\n  template: `\n    <div class=\"user\">\n      <h2>User {{ $route.params.id }}</h2>\n      \x3c!-- 路由的目标组件中也有个router-view --\x3e\n      <router-view></router-view>\n    </div>\n  `\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User,\n      children: [\n        {\n          // 当 /user/:id/profile 匹配成功，\n          // UserProfile 会被渲染在 User 的 <router-view> 中\n          path: 'profile',\n          component: UserProfile\n        }\n      ]\n    }\n  ]\n})\n")])])]),r("ul",[r("li",[e._v("函数式编程"),r("br"),e._v("\nthis.$router.push(path)     将当前路径添加至浏览器的history，并跳转至path"),r("br"),e._v("\nthis.$router.replace(path)  不添加history，直接跳转至path"),r("br"),e._v("\nthis.$router.go(n)          在 history 记录中向前或者后退n步")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\x3c!-- push、replace用法相同 --\x3e\n// 字符串\nrouter.push('home')\n\n// 对象\nrouter.push({ path: 'home' })\n\n// 命名的路由\nrouter.push({ name: 'user', params: { userId: '123' }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n")])])]),r("ul",[r("li",[e._v("命名视图")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// html中命名多个视图\n<router-view class="view one"></router-view>\n<router-view class="view two" name="a"></router-view>\n<router-view class="view three" name="b"></router-view>\n\n// 相应的，路由实例中对应多个组件\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \'/\',\n      components: { // 带上s\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n')])])]),r("ul",[r("li",[e._v("重定向路由（redirect）")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\x3c!-- 访问/a时，跳转至/b --\x3e\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n")])])]),r("ul",[r("li",[e._v("别名路由（alias）")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\x3c!-- 访问/b时，路由虽然现实/b，但实际访问的还是/a，与访问/a一样 --\x3e\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n")])])]),r("ul",[r("li",[e._v("路由组件传参")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true }\n  ]\n})\n")])])]),r("ul",[r("li",[e._v("滚动行为")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // return 期望滚动到的位置\n    return { x: 0, y: 0 }\n  }\n})\n")])])]),r("ul",[r("li",[r("p",[e._v("路由懒加载")]),e._v(" "),r("p",[e._v("结合"),r("code",[e._v("Vue")]),e._v("的异步组件和"),r("code",[e._v("Webpack")]),e._v("的代码分割功能，轻松实现路由组件的懒加载。"),r("br"),e._v("\n首先，"),r("code",[e._v("Vue")]),e._v("异步组件：可以将异步组件定义为返回一个"),r("code",[e._v("Promise")]),e._v("的工厂函数（该函数返回的 Promise 应该 resolve 组件本身）")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("const Foo = () => Promise.resolve({/* 组件定义对象 */})\n")])])]),r("p",[e._v("其次，"),r("code",[e._v("Webpack")]),e._v("代码分割：在"),r("code",[e._v("Webpack 2")]),e._v("中，可以使用"),r("code",[e._v("动态import")]),e._v("语法来定义代码分块点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("import('./Foo.vue') // 返回 Promise\n")])])]),r("p",[e._v("两者结合，可在"),r("code",[e._v("VueRouter")]),e._v("中，这样实现组件懒加载：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("// 懒加载\nconst Foo = () => import('./Foo.vue') // webpack 打包时生成单独文件\n// 使用\nconst router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo }  // 当路由生效时，就会去懒加载 Foo 组件的打包文件\n  ]\n})\n")])])]),r("p",[e._v("按组分块，是指使用名称"),r("code",[e._v("chunk")]),e._v("，将几个异步组件打包到同一个文件中")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')")])])])])])])}),[],!1,null,null,null);t.default=o.exports}}]);